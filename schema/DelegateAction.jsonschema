{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "properties": {
        "name": {
            "type": "string",
            "description": "The name of the Route Table to delegate to.\n Deprecated: these fields have been added for backwards-compatibility. Please use the `single` field. If `name`\n and/or `namespace` have been specified, Gloo will ignore `single` and `selector`."
        },
        "namespace": {
            "type": "string",
            "description": "The namespace of the Route Table to delegate to.\n Deprecated: these fields have been added for backwards-compatibility. Please use the `single` field. If `name`\n and/or `namespace` have been specified, Gloo will ignore `single` and `selector`."
        },
        "ref": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "namespace": {
                    "type": "string"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "Delegate to the Route Table resource with the given `name` and `namespace."
        },
        "selector": {
            "properties": {
                "namespaces": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "Delegate to Route Tables in these namespaces. If omitted, Gloo will only select Route Tables in the same namespace\n as the resource (Virtual Service or Route Table) that owns this selector. The reserved value \"*\" can be used to\n select Route Tables in all namespaces watched by Gloo."
                },
                "labels": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "type": "object",
                    "description": "Delegate to Route Tables whose labels match the ones specified here."
                },
                "expressions": {
                    "items": {
                        "$schema": "http://json-schema.org/draft-04/schema#",
                        "properties": {
                            "key": {
                                "type": "string",
                                "description": "Kubernetes label key, must conform to Kubernetes syntax requirements\n https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#syntax-and-character-set"
                            },
                            "operator": {
                                "enum": [
                                    "Equals",
                                    0,
                                    "DoubleEquals",
                                    1,
                                    "NotEquals",
                                    2,
                                    "In",
                                    3,
                                    "NotIn",
                                    4,
                                    "Exists",
                                    5,
                                    "DoesNotExist",
                                    6,
                                    "GreaterThan",
                                    7,
                                    "LessThan",
                                    8
                                ],
                                "oneOf": [
                                    {
                                        "type": "string"
                                    },
                                    {
                                        "type": "integer"
                                    }
                                ],
                                "description": "The operator can only be in, notin, =, ==, !=, exists, ! (DoesNotExist), gt (GreaterThan), lt (LessThan)."
                            },
                            "values": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object"
                    },
                    "type": "array",
                    "description": "Expressions allow for more flexible Route Tables label matching, such as equality-based requirements, set-based requirements, or a combination of both.\n https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#equality-based-requirement"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "Delegate to the Route Tables that match the given selector."
        }
    },
    "additionalProperties": false,
    "type": "object",
    "description": "DelegateActions are used to delegate routing decisions to Route Tables."
}