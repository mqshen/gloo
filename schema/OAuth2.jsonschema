{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "properties": {
        "oidc_authorization_code": {
            "properties": {
                "client_id": {
                    "type": "string",
                    "description": "your client id as registered with the issuer"
                },
                "client_secret_ref": {
                    "properties": {
                        "name": {
                            "type": "string"
                        },
                        "namespace": {
                            "type": "string"
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "your client secret as registered with the issuer"
                },
                "issuer_url": {
                    "type": "string",
                    "description": "The url of the issuer. We will look for OIDC information in issuerUrl+\n \".well-known/openid-configuration\""
                },
                "auth_endpoint_query_params": {
                    "additionalProperties": {
                        "type": "string"
                    },
                    "type": "object",
                    "description": "extra query parameters to apply to the Ext-Auth service's authorization request to the identity provider."
                },
                "app_url": {
                    "type": "string",
                    "description": "we to redirect after successful auth, if we can't determine the original\n url this should be your publicly available app url."
                },
                "callback_path": {
                    "type": "string",
                    "description": "a callback path relative to app url that will be used for OIDC callbacks.\n should not be used by the application."
                },
                "logout_path": {
                    "type": "string",
                    "description": "a path relative to app url that will be used for logging out from an OIDC session.\n should not be used by the application.\n If not provided, logout functionality will be disabled."
                },
                "scopes": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "Scopes to request in addition to openid scope."
                },
                "session": {
                    "properties": {
                        "fail_on_fetch_failure": {
                            "type": "boolean",
                            "description": "should we fail auth flow when failing to get a session from redis, or allow it to continue,\n potentially starting a new auth flow and setting a new session."
                        },
                        "cookie_options": {
                            "properties": {
                                "max_age": {
                                    "additionalProperties": true,
                                    "type": "integer",
                                    "description": "Max age for the cookie. Leave unset for a default of 30 days (2592000 seconds).\n To disable cookie expiry, set explicitly to 0."
                                },
                                "not_secure": {
                                    "type": "boolean",
                                    "description": "Use a non-secure cookie. Note - this should only be used for testing and in trusted \n environments."
                                },
                                "path": {
                                    "additionalProperties": true,
                                    "type": "string",
                                    "description": "Path of the cookie. If unset, defaults to \"/\". Set it explicitly to \"\" to avoid setting a \n path."
                                },
                                "domain": {
                                    "type": "string",
                                    "description": "Cookie domain"
                                }
                            },
                            "additionalProperties": true,
                            "type": "object",
                            "description": "Set-Cookie options"
                        },
                        "cookie": {
                            "additionalProperties": true,
                            "type": "object",
                            "description": "Set the tokens in the cookie itself. No need for server side state."
                        },
                        "redis": {
                            "properties": {
                                "options": {
                                    "properties": {
                                        "host": {
                                            "type": "string",
                                            "description": "address of the redis. can be address:port or unix://path/to/unix.sock"
                                        },
                                        "db": {
                                            "type": "integer",
                                            "description": "db to use. can leave unset for db 0."
                                        },
                                        "pool_size": {
                                            "type": "integer",
                                            "description": "size of the connection pool. can leave unset for default.\n defaults to 10 connections per every CPU"
                                        }
                                    },
                                    "additionalProperties": true,
                                    "type": "object",
                                    "description": "Options to connect to redis"
                                },
                                "key_prefix": {
                                    "type": "string",
                                    "description": "Key prefix inside redis"
                                },
                                "cookie_name": {
                                    "type": "string",
                                    "description": "Cookie name to set and store the session id. If empty the default \"__session\" is used."
                                },
                                "allow_refreshing": {
                                    "additionalProperties": true,
                                    "type": "boolean",
                                    "description": "When set, refresh expired id-tokens using the refresh-token. Defaults to true.\n Explicitly set to false to disable refreshing."
                                }
                            },
                            "additionalProperties": true,
                            "type": "object",
                            "description": "Use redis to store the tokens and just store a random id in the cookie."
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "Configuration related to the user session."
                },
                "headers": {
                    "properties": {
                        "id_token_header": {
                            "type": "string",
                            "description": "If set, the id token will be forward upstream using this header name."
                        },
                        "access_token_header": {
                            "type": "string",
                            "description": "If set, the access token will be forward upstream using this header name."
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "Configures headers added to requests."
                },
                "discovery_override": {
                    "properties": {
                        "auth_endpoint": {
                            "type": "string",
                            "description": "url of the provider authorization endpoint"
                        },
                        "token_endpoint": {
                            "type": "string",
                            "description": "url of the provider token endpoint"
                        },
                        "jwks_uri": {
                            "type": "string",
                            "description": "url of the provider json web key set"
                        },
                        "scopes": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "description": "list of scope values that the provider supports"
                        },
                        "response_types": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "description": "list of response types that the provider supports"
                        },
                        "subjects": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "description": "list of subject identifier types that the provider supports"
                        },
                        "id_token_algs": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "description": "list of json web signature signing algorithms that the provider supports for encoding claims in a jwt"
                        },
                        "auth_methods": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "description": "list of client authentication methods supported by the provider token endpoint"
                        },
                        "claims": {
                            "items": {
                                "type": "string"
                            },
                            "type": "array",
                            "description": "list of claim types that the provider supports"
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "OIDC configuration is discovered at \u003cissuerUrl\u003e/.well-known/openid-configuration\n The discovery override defines any properties that should override this discovery configuration\n For example, the following AuthConfig CRD could be defined as:\n    ```yaml\n    apiVersion: enterprise.gloo.solo.io/v1\n    kind: AuthConfig\n    metadata:\n      name: google-oidc\n      namespace: gloo-system\n    spec:\n      configs:\n      - oauth:\n          app_url: http://localhost:8080\n          callback_path: /callback\n          client_id: $CLIENT_ID\n          client_secret_ref:\n            name: google\n            namespace: gloo-system\n          issuer_url: https://accounts.google.com\n          discovery_override:\n            token_endpoint: \"https://token.url/gettoken\"\n    ```\n\n And this will ensure that regardless of what value is discovered at\n \u003cissuerUrl\u003e/.well-known/openid-configuration, \"https://token.url/gettoken\" will be used as the token endpoint"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "provide issuer location and let gloo handle OIDC flow for you.\n requests authorized by validating the contents of ID token.\n can also authorize the access token if configured."
        },
        "access_token_validation": {
            "properties": {
                "introspection_url": {
                    "type": "string",
                    "description": "the url for the OAuth2.0 access token introspection endpoint.\n if provided, the (opaque) access token provided or received from the oauth authorization endpoint\n will be validated against this endpoint, or locally cached responses for this access token."
                },
                "userinfo_url": {
                    "type": "string",
                    "description": "the url for the OIDC userinfo endpoint.\n if provided, the (opaque) access token provided or received from the oauth endpoint\n will be queried and the userinfo response (or cached response) will be put in the `AuthorizationRequest` state.\n this can be useful to leverage the userinfo response in, for example, an extauth server plugin."
                },
                "cache_timeout": {
                    "properties": {
                        "seconds": {
                            "type": "string",
                            "description": "Signed seconds of the span of time. Must be from -315,576,000,000\n to +315,576,000,000 inclusive. Note: these bounds are computed from:\n 60 sec/min * 60 min/hr * 24 hr/day * 365.25 days/year * 10000 years"
                        },
                        "nanos": {
                            "type": "integer",
                            "description": "Signed fractions of a second at nanosecond resolution of the span\n of time. Durations less than one second are represented with a 0\n `seconds` field and a positive or negative `nanos` field. For durations\n of one second or more, a non-zero value for the `nanos` field must be\n of the same sign as the `seconds` field. Must be from -999,999,999\n to +999,999,999 inclusive."
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "how long the token introspection and userinfo endpoint response for a specific access token should be kept\n in the in-memory cache. the result will be invalidated at this timeout, or at \"exp\" time from the introspection\n result, whichever comes sooner. if omitted, defaults to 10 minutes. if zero, then no caching will be done."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "provide the access token on the request and let gloo handle authorization.\n\n according to https://tools.ietf.org/html/rfc6750 you can pass tokens through:\n - form-encoded body parameter. recommended, more likely to appear. e.g.: Authorization: Bearer mytoken123\n - URI query parameter e.g. access_token=mytoken123\n - and (preferably) secure cookies"
        }
    },
    "additionalProperties": false,
    "type": "object"
}