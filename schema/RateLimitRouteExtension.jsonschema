{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "properties": {
        "include_vh_rate_limits": {
            "type": "boolean",
            "description": "Whether or not to include rate limits as defined on the VirtualHost in addition to rate limits on the Route."
        },
        "rate_limits": {
            "items": {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "properties": {
                    "actions": {
                        "items": {
                            "$schema": "http://json-schema.org/draft-04/schema#",
                            "$ref": "#/definitions/ratelimit.api.solo.io.Action"
                        },
                        "type": "array"
                    },
                    "set_actions": {
                        "items": {
                            "$schema": "http://json-schema.org/draft-04/schema#",
                            "$ref": "#/definitions/ratelimit.api.solo.io.Action"
                        },
                        "type": "array"
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "description": "Each action and setAction in the lists maps part of the request (or its context) to a descriptor. The tuple or set of descriptors\n generated by the provided actions is sent to the rate limit server and matched against rate limit rules.\n Order matters on provided actions but not on setActions, e.g. the following actions:\n - actions:\n   - requestHeaders:\n      descriptorKey: account_id\n      headerName: x-account-id\n   - requestHeaders:\n      descriptorKey: plan\n      headerName: x-plan\n define an ordered descriptor tuple like so: ('account_id', '\u003cx-account-id value\u003e'), ('plan', '\u003cx-plan value\u003e')\n\n While the current form matches, the same tuple in reverse order would not match the following descriptor:\n\n descriptors:\n - key: account_id\n   descriptors:\n   - key: plan\n     value: BASIC\n     rateLimit:\n       requestsPerUnit: 1\n       unit: MINUTE\n  - key: plan\n    value: PLUS\n    rateLimit:\n      requestsPerUnit: 20\n      unit: MINUTE\n\n Similarly, the following setActions:\n - setActions:\n   - requestHeaders:\n      descriptorKey: account_id\n      headerName: x-account-id\n   - requestHeaders:\n      descriptorKey: plan\n      headerName: x-plan\n define an unordered descriptor set like so: {('account_id', '\u003cx-account-id value\u003e'), ('plan', '\u003cx-plan value\u003e')}\n\n This set would match the following setDescriptor:\n\n setDescriptors:\n - simpleDescriptors:\n   - key: plan\n     value: BASIC\n   - key: account_id\n  rateLimit:\n    requestsPerUnit: 20\n    unit: MINUTE\n\n It would also match the following setDescriptor which includes only a subset of the setActions enumerated:\n\n setDescriptors:\n - simpleDescriptors:\n   - key: account_id\n  rateLimit:\n    requestsPerUnit: 20\n    unit: MINUTE\n\n It would even match the following setDescriptor.\n Any setActions list would match this setDescriptor which has simpleDescriptors omitted entirely:\n\n setDescriptors:\n - rateLimit:\n    requestsPerUnit: 20\n    unit: MINUTE"
            },
            "type": "array",
            "description": "Define individual rate limits here. Each rate limit will be evaluated, if any rate limit\n would be throttled, the entire request returns a 429 (gets throttled)"
        }
    },
    "additionalProperties": false,
    "type": "object",
    "description": "Use this field if you want to inline the Envoy rate limits for this Route.\n Note that this does not configure the rate limit server. If you are running Gloo Enterprise, you need to\n specify the server configuration via the appropriate field in the Gloo `Settings` resource. If you are\n running a custom rate limit server you need to configure it yourself.",
    "definitions": {
        "ratelimit.api.solo.io.Action": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "properties": {
                "source_cluster": {
                    "additionalProperties": true,
                    "type": "object",
                    "description": "Rate limit on source cluster."
                },
                "destination_cluster": {
                    "additionalProperties": true,
                    "type": "object",
                    "description": "Rate limit on destination cluster."
                },
                "request_headers": {
                    "properties": {
                        "header_name": {
                            "type": "string",
                            "description": "The header name to be queried from the request headers. The headerâ€™s\n value is used to populate the value of the descriptor entry for the\n descriptor_key.\n\n[(validate.rules).string.min_bytes = 1];"
                        },
                        "descriptor_key": {
                            "type": "string",
                            "description": "The key to use in the descriptor entry.\n\n[(validate.rules).string.min_bytes = 1];"
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "Rate limit on request headers."
                },
                "remote_address": {
                    "additionalProperties": true,
                    "type": "object",
                    "description": "Rate limit on remote address."
                },
                "generic_key": {
                    "properties": {
                        "descriptor_value": {
                            "type": "string",
                            "description": "The value to use in the descriptor entry.\n\n[(validate.rules).string.min_bytes = 1];"
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "Rate limit on a generic key."
                },
                "header_value_match": {
                    "properties": {
                        "descriptor_value": {
                            "type": "string",
                            "description": "The value to use in the descriptor entry.\n\n[(validate.rules).string.min_bytes = 1];"
                        },
                        "expect_match": {
                            "additionalProperties": true,
                            "type": "boolean",
                            "description": "If set to true, the action will append a descriptor entry when the\n request matches the headers. If set to false, the action will append a\n descriptor entry when the request does not match the headers. The\n default value is true."
                        },
                        "headers": {
                            "items": {
                                "$schema": "http://json-schema.org/draft-04/schema#",
                                "properties": {
                                    "name": {
                                        "type": "string",
                                        "description": "Specifies the name of the header in the request.\n\n[(validate.rules).string.min_bytes = 1];"
                                    },
                                    "exact_match": {
                                        "type": "string",
                                        "description": "If specified, header match will be performed based on the value of the header."
                                    },
                                    "regex_match": {
                                        "type": "string",
                                        "description": "If specified, this regex string is a regular expression rule which implies the entire request\n header value must match the regex. The rule will not match if only a subsequence of the\n request header value matches the regex. The regex grammar used in the value field is defined\n `(here)[https://en.cppreference.com/w/cpp/regex/ecmascript]`.\n\n Examples:\n\n * The regex *\\d{3}* matches the value *123*\n * The regex *\\d{3}* does not match the value *1234*\n * The regex *\\d{3}* does not match the value *123.456*\n\n[(validate.rules).string.max_bytes = 1024];"
                                    },
                                    "range_match": {
                                        "properties": {
                                            "start": {
                                                "type": "string",
                                                "description": "start of the range (inclusive)"
                                            },
                                            "end": {
                                                "type": "string",
                                                "description": "end of the range (exclusive)"
                                            }
                                        },
                                        "additionalProperties": true,
                                        "type": "object",
                                        "description": "If specified, header match will be performed based on range.\n The rule will match if the request header value is within this range.\n The entire request header value must represent an integer in base 10 notation: consisting of\n an optional plus or minus sign followed by a sequence of digits. The rule will not match if\n the header value does not represent an integer. Match will fail for empty values, floating\n point numbers or if only a subsequence of the header value is an integer.\n\n Examples:\n\n * For range [-10,0), route will match for header value -1, but not for 0, \"somestring\", 10.9,\n   \"-1somestring\""
                                    },
                                    "present_match": {
                                        "type": "boolean",
                                        "description": "If specified, header match will be performed based on whether the header is in the\n request."
                                    },
                                    "prefix_match": {
                                        "type": "string",
                                        "description": "If specified, header match will be performed based on the prefix of the header value.\n Note: empty prefix is not allowed, please use present_match instead.\n\n Examples:\n\n * The prefix *abcd* matches the value *abcdxyz*, but not for *abcxyz*.\n\n[(validate.rules).string.min_bytes = 1];"
                                    },
                                    "suffix_match": {
                                        "type": "string",
                                        "description": "If specified, header match will be performed based on the suffix of the header value.\n Note: empty suffix is not allowed, please use present_match instead.\n\n Examples:\n\n * The suffix *abcd* matches the value *xyzabcd*, but not for *xyzbcd*.\n\n[(validate.rules).string.min_bytes = 1];"
                                    },
                                    "invert_match": {
                                        "type": "boolean",
                                        "description": "If specified, the match result will be inverted before checking. Defaults to false.\n\n Examples:\n\n * The regex *\\d{3}* does not match the value *1234*, so it will match when inverted.\n * The range [-10,0) will match the value -1, so it will not match when inverted."
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object"
                            },
                            "type": "array",
                            "description": "Specifies a set of headers that the rate limit action should match\n on. The action will check the requestâ€™s headers against all the\n specified headers in the config. A match will happen if all the\n headers in the config are present in the request with the same values\n (or based on presence if the value field is not in the config).\n\n[(validate.rules).repeated .min_items = 1];"
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "Rate limit on the existence of request headers."
                },
                "metadata": {
                    "properties": {
                        "descriptor_key": {
                            "type": "string",
                            "description": "Required. The key to use in the descriptor entry.\n\n[(validate.rules).string = {min_len: 1}];"
                        },
                        "metadata_key": {
                            "properties": {
                                "key": {
                                    "type": "string",
                                    "description": "Required. The key name of Metadata to retrieve the Struct from the metadata.\n Typically, it represents a builtin subsystem or custom extension.\n\n[(validate.rules).string = {min_len: 1}];"
                                },
                                "path": {
                                    "items": {
                                        "$schema": "http://json-schema.org/draft-04/schema#",
                                        "properties": {
                                            "key": {
                                                "type": "string",
                                                "description": "Required. If specified, use the key to retrieve the value in a Struct.\n\n[(validate.rules).string = {min_len: 1}];"
                                            }
                                        },
                                        "additionalProperties": false,
                                        "type": "object",
                                        "description": "Specifies the segment in a path to retrieve value from Metadata.\n Currently it is only supported to specify the key, i.e. field name, as one segment of a path."
                                    },
                                    "type": "array",
                                    "description": "Must have at least one element. The path to retrieve the Value from the Struct. It can be a prefix or a full path,\n e.g. ``[prop, xyz]`` for a struct or ``[prop, foo]`` for a string in the example,\n which depends on the particular scenario.\n\n Note: Due to that only the key type segment is supported, the path can not specify a list\n unless the list is the last segment.\n\n[(validate.rules).repeated = {min_items: 1}];"
                                }
                            },
                            "additionalProperties": true,
                            "type": "object",
                            "description": "Required. Metadata struct that defines the key and path to retrieve the string value. A match will\n only happen if the value in the metadata is of type string.\n\n[(validate.rules).message = {required: true}];"
                        },
                        "default_value": {
                            "type": "string",
                            "description": "An optional value to use if *metadata_key* is empty. If not set and\n no value is present under the metadata_key then no descriptor is generated."
                        },
                        "source": {
                            "enum": [
                                "DYNAMIC",
                                0,
                                "ROUTE_ENTRY",
                                1
                            ],
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "integer"
                                }
                            ],
                            "description": "Source of metadata\n\n[(validate.rules).enum = {defined_only: true}];"
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "Rate limit on metadata."
                }
            },
            "additionalProperties": false,
            "type": "object",
            "description": "Copied directly from envoy\n https://www.envoyproxy.io/docs/envoy/latest/api-v3/config/route/v3/route_components.proto#envoy-v3-api-msg-config-route-v3-ratelimit-action",
            "id": "ratelimit.api.solo.io.Action"
        }
    }
}