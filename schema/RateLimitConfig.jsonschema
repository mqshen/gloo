{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "properties": {
        "domain": {
            "type": "string",
            "description": "@solo-kit:resource.name"
        },
        "descriptors": {
            "items": {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "$ref": "#/definitions/ratelimit.api.solo.io.Descriptor"
            },
            "type": "array"
        },
        "set_descriptors": {
            "items": {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "properties": {
                    "simple_descriptors": {
                        "items": {
                            "$schema": "http://json-schema.org/draft-04/schema#",
                            "properties": {
                                "key": {
                                    "type": "string",
                                    "description": "The key of the descriptor. This field is required."
                                },
                                "value": {
                                    "type": "string",
                                    "description": "Optional value for the descriptor. If omitted, the server will create a rate limit for\n each value that is provided for this descriptor in rate limit requests."
                                }
                            },
                            "additionalProperties": false,
                            "type": "object",
                            "description": "A simpleDescriptor is a list of key/value pairs that the rate limit server uses to select\n the correct rate limit to use when limiting with the set style. Descriptors are case-sensitive.\n\n The format is:\n\n ```\n  simple_descriptors:\n    - key: \u003crule key: required\u003e\n      value: \u003crule value: optional\u003e\n    - ... (repetition of above)\n ```\n\n Each simpleDescriptor in a simpleDescriptor list must have a key. It can also optionally have a value to enable\n a more specific match."
                        },
                        "type": "array",
                        "description": "Simple descriptor key/value pairs."
                    },
                    "rate_limit": {
                        "$ref": "#/definitions/ratelimit.api.solo.io.RateLimit",
                        "additionalProperties": true,
                        "description": "Rate limit rule for the descriptor."
                    },
                    "always_apply": {
                        "type": "boolean",
                        "description": "Typically, rule priority is signalled by rule ordering, as the first rule match for\n the descriptor tuple generated by the rate limit actions is used.\n\n In some cases this is too restrictive; A boolean override can be specified. Any rule with `alwaysApply` set to `true` will\n always be considered for rate limiting, regardless of the rule's place in the ordered list of rules.\n The first rule to match will still be considered. (This can be a rule that also has `alwaysApply` set to `true`.)\n\n If any of these rules trigger rate limiting then the entire request will return a 429.\n Rules that are not considered for rate limiting are ignored in the\n rate limit server, and their request count is not incremented in the rate limit server cache.\n\n Defaults to false."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "description": "A setDescriptor is a list of key/value pairs that the rate limit server uses to select\n the correct rate limit to use when limiting with the set style. Descriptors are case-sensitive.\n\n Each configuration contains a simpleDescriptor list and a rateLimit.\n The format is:\n\n ```\n set_descriptors:\n  - simple_descriptors: (optional block)\n      - key: \u003crule key: required\u003e\n        value: \u003crule value: optional\u003e\n      - ... (repetition of above)\n    rate_limit:\n      requests_per_unit: \u003csee below: required\u003e\n      unit: \u003csee below: required\u003e\n    always_apply: \u003cbool value: optional\u003e\n  - ... (repetition of above)\n ```\n\n Each SetDescriptor defines a new Rate Limit \"rule\". When a request comes in, rate limit\n actions are applied to the request to generate descriptor tuples that are sent to the rate limit\n server. If any rule is triggered then the entire request returns HTTP 429 Too Many Requests.\n\n The `rate_limit` block sets up an actual rate limit rule."
            },
            "type": "array"
        }
    },
    "additionalProperties": false,
    "type": "object",
    "description": "@solo-kit:xds-service=RateLimitDiscoveryService\n@solo-kit:resource.no_references",
    "definitions": {
        "ratelimit.api.solo.io.Descriptor": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key of the descriptor. This field is required."
                },
                "value": {
                    "type": "string",
                    "description": "Optional value for the descriptor. If omitted, the server will create a rate limit for\n each value that is provided for this descriptor in rate limit requests."
                },
                "rate_limit": {
                    "$ref": "#/definitions/ratelimit.api.solo.io.RateLimit",
                    "additionalProperties": true,
                    "description": "Optional rate limit rule for the descriptor."
                },
                "descriptors": {
                    "items": {
                        "$schema": "http://json-schema.org/draft-04/schema#",
                        "$ref": "#/definitions/ratelimit.api.solo.io.Descriptor"
                    },
                    "type": "array",
                    "description": "Nested descriptors."
                },
                "weight": {
                    "type": "integer",
                    "description": "Each top-level Descriptor defines a new Rate Limit \"rule\". When a request comes in, rate limit\n actions are applied to the request to generate descriptor tuples that are sent to the rate limit\n server. If any rule is triggered then the entire request returns HTTP 429 Too Many Requests.\n\n Typically, rule priority is signalled by nesting descriptors, as the most specific rule match for\n the descriptor tuple generated by the rate limit actions is used. In rare cases this is too restrictive;\n instead you can set rule priority by setting weights on your descriptors.\n\n All rules with the highest weight are processed, if any of these rules trigger rate limiting then the\n entire request will return a 429. Rules that are not considered for rate limiting are ignored in the\n rate limit server, and their request count is not incremented in the rate limit server cache.\n\n Defaults to 0; thus all rules are evaluated by default."
                },
                "always_apply": {
                    "type": "boolean",
                    "description": "A boolean override for rule priority via weighted rules. Any rule with `alwaysApply` set to `true` will\n always be considered for rate limiting, regardless of the rule's weight. The rule with the highest weight\n will still be considered. (this can be a rule that also has `alwaysApply` set to `true`)\n\n Defaults to false."
                }
            },
            "additionalProperties": false,
            "type": "object",
            "description": "A descriptor is a list of key/value pairs that the rate limit server uses to select\n the correct rate limit to use when limiting. Descriptors are case-sensitive.\n\n Each configuration contains a top level descriptor list and potentially multiple nested lists beneath that.\n The format is:\n\n ```\n descriptors:\n   - key: \u003crule key: required\u003e\n     value: \u003crule value: optional\u003e\n     rate_limit: (optional block)\n       unit: \u003csee below: required\u003e\n       requests_per_unit: \u003csee below: required\u003e\n     descriptors: (optional block)\n       - ... (nested repetition of above)\n ```\n\n Each descriptor in a descriptor list must have a key. It can also optionally have a value to enable\n a more specific match. The `rate_limit` block is optional and, if present, sets up an actual rate limit rule.\n If the rate limit is not present and there are no nested descriptors, then the descriptor is effectively whitelisted.\n Otherwise, nested descriptors allow more complex matching and rate limiting scenarios.",
            "id": "ratelimit.api.solo.io.Descriptor"
        },
        "ratelimit.api.solo.io.RateLimit": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "properties": {
                "unit": {
                    "enum": [
                        "UNKNOWN",
                        0,
                        "SECOND",
                        1,
                        "MINUTE",
                        2,
                        "HOUR",
                        3,
                        "DAY",
                        4
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ]
                },
                "requests_per_unit": {
                    "type": "integer"
                }
            },
            "additionalProperties": false,
            "type": "object",
            "description": "A `RateLimit` specifies the actual rate limit that will be used when there is a match.",
            "id": "ratelimit.api.solo.io.RateLimit"
        }
    }
}