{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "properties": {
        "matcher": {
            "properties": {
                "prefix": {
                    "type": "string",
                    "description": "If specified, the route is a prefix rule meaning that the prefix must\n match the beginning of the *:path* header."
                },
                "exact": {
                    "type": "string",
                    "description": "If specified, the route is an exact path rule meaning that the path must\n exactly match the *:path* header once the query string is removed."
                },
                "regex": {
                    "type": "string",
                    "description": "If specified, the route is a regular expression rule meaning that the\n regex must match the *:path* header once the query string is removed. The entire path\n (without the query string) must match the regex. The rule will not match if only a\n sub-sequence of the *:path* header matches the regex. The regex grammar is defined `here\n \u003chttp://en.cppreference.com/w/cpp/regex/ecmascript\u003e`_.\n\n Examples:\u003cbr/\u003e\n\n * The regex */b[io]t* matches the path */bit*\u003cbr/\u003e\n * The regex */b[io]t* matches the path */bot*\u003cbr/\u003e\n * The regex */b[io]t* does not match the path */bite*\u003cbr/\u003e\n * The regex */b[io]t* does not match the path */bit/bot*\u003cbr/\u003e\u003cbr/\u003e\n\n Note that the complexity of the regex is constrained by the regex engine's \"program size\" setting.\n If your regex is too complex, you may need to adjust the `regexMaxProgramSize` field\n in the `GlooOptions` section of your `Settings` resource"
                },
                "case_sensitive": {
                    "additionalProperties": true,
                    "type": "boolean",
                    "description": "Indicates that prefix/path matching should be case sensitive. The default is true."
                },
                "headers": {
                    "items": {
                        "$schema": "http://json-schema.org/draft-04/schema#",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "Specifies the name of the header in the request."
                            },
                            "value": {
                                "type": "string",
                                "description": "Specifies the value of the header. If the value is absent a request that\n has the name header will match, regardless of the header’s value."
                            },
                            "regex": {
                                "type": "boolean",
                                "description": "Specifies whether the header value should be treated as regex or not."
                            },
                            "invert_match": {
                                "type": "boolean",
                                "description": "If set to true, the result of the match will be inverted. Defaults to false.\n\n Examples:\n * name=foo, invert_match=true: matches if no header named `foo` is present\n * name=foo, value=bar, invert_match=true: matches if no header named `foo` with value `bar` is present\n * name=foo, value=``\\d{3}``, regex=true, invert_match=true: matches if no header named `foo` with a value consisting of three integers is present"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "description": "Internally, Gloo always uses the HTTP/2 *:authority* header to represent the HTTP/1 *Host* header.\n Thus, if attempting to match on *Host*, match on *:authority* instead."
                    },
                    "type": "array",
                    "description": "Specifies a set of headers that the route should match on. The router will\n check the request’s headers against all the specified headers in the route\n config. A match will happen if all the headers in the route are present in\n the request with the same values (or based on presence if the value field\n is not in the config)."
                },
                "query_parameters": {
                    "items": {
                        "$schema": "http://json-schema.org/draft-04/schema#",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "Specifies the name of a key that must be present in the requested\n *path*'s query string."
                            },
                            "value": {
                                "type": "string",
                                "description": "Specifies the value of the key. If the value is absent, a request\n that contains the key in its query string will match, whether the\n key appears with a value (e.g., \"?debug=true\") or not (e.g., \"?debug\")"
                            },
                            "regex": {
                                "type": "boolean",
                                "description": "Specifies whether the query parameter value is a regular expression.\n Defaults to false. The entire query parameter value (i.e., the part to\n the right of the equals sign in \"key=value\") must match the regex.\n E.g., the regex \"\\d+$\" will match \"123\" but not \"a123\" or \"123a\"."
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "description": "Query parameter matching treats the query string of a request's :path header\n as an ampersand-separated list of keys and/or key=value elements."
                    },
                    "type": "array",
                    "description": "Specifies a set of URL query parameters on which the route should\n match. The router will check the query string from the *path* header\n against all the specified query parameters. If the number of specified\n query parameters is nonzero, they all must match the *path* header's\n query string for a match to occur."
                },
                "methods": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "HTTP Method/Verb(s) to match on. If none specified, the matcher will ignore the HTTP Method"
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "Matcher by which to determine if the given transformation should be applied\n if omitted, will it match all (i.e., default to / prefix matcher)"
        },
        "actions": {
            "items": {
                "$schema": "http://json-schema.org/draft-04/schema#",
                "properties": {
                    "action_type": {
                        "enum": [
                            "CUSTOM",
                            0,
                            "SSN",
                            1,
                            "MASTERCARD",
                            2,
                            "VISA",
                            3,
                            "AMEX",
                            4,
                            "DISCOVER",
                            5,
                            "JCB",
                            6,
                            "DINERS_CLUB",
                            7,
                            "CREDIT_CARD_TRACKERS",
                            8,
                            "ALL_CREDIT_CARDS",
                            9
                        ],
                        "oneOf": [
                            {
                                "type": "string"
                            },
                            {
                                "type": "integer"
                            }
                        ],
                        "description": "The action type to implement."
                    },
                    "custom_action": {
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "The name of the custom action.\n This name is used for logging and debugging purposes."
                            },
                            "regex": {
                                "items": {
                                    "type": "string"
                                },
                                "type": "array",
                                "description": "The list of regex strings which will be applied in order."
                            },
                            "mask_char": {
                                "type": "string",
                                "description": "The masking character for the sensitive data.\n default value: X"
                            },
                            "percent": {
                                "properties": {
                                    "value": {
                                        "type": "number"
                                    }
                                },
                                "additionalProperties": true,
                                "type": "object",
                                "description": "The percent of the string which will be masked by the mask_char\n default value: 75%\n rounds ratio (percent/100) by std::round http://www.cplusplus.com/reference/cmath/round/"
                            }
                        },
                        "additionalProperties": true,
                        "type": "object",
                        "description": "The custom user action to be applied.\n This field will only be used if the custom action type is specified above."
                    },
                    "shadow": {
                        "type": "boolean",
                        "description": "Shadow represents whether the action should be taken, or just recorded."
                    }
                },
                "additionalProperties": false,
                "type": "object",
                "description": "A single action meant to mask sensitive data.\nThe action type represents a set of pre configured actions,\nas well as the ability to create custom actions.\nThese actions can also be shadowed, a shadowed action will be recorded\nin the statistics, and debug logs, but not actually committed in the response body.\n\nTo use a pre-made action simply set the action type to anything other than `CUSTOM`\n\n``` yaml\nactionType: VISA\n```\n\nTo create a custom action set the custom action field. The default enum value\nis custom, so that can be left empty.\n\n``` yaml\ncustomAction:\nname: test\nregex:\n- \"hello\"\n- \"world\"\nmaskChar: Y\npercent: 60\n```"
            },
            "type": "array",
            "description": "List of data loss prevention actions to be applied.\n These actions will be applied in order, one at a time."
        }
    },
    "additionalProperties": false,
    "type": "object",
    "description": "Rule which applies a given set of actions to a matching route.\n The route matching functions exactly the same as the envoy routes in the virtual host."
}