{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "properties": {
        "match": {
            "properties": {
                "headers": {
                    "items": {
                        "$schema": "http://json-schema.org/draft-04/schema#",
                        "properties": {
                            "name": {
                                "type": "string",
                                "description": "Specifies the name of the header in the request."
                            },
                            "exact_match": {
                                "type": "string",
                                "description": "If specified, header match will be performed based on the value of the header."
                            },
                            "safe_regex_match": {
                                "$ref": "#/definitions/solo.io.envoy.type.matcher.v3.RegexMatcher",
                                "additionalProperties": true,
                                "description": "If specified, this regex string is a regular expression rule which implies the entire request\n header value must match the regex. The rule will not match if only a subsequence of the\n request header value matches the regex."
                            },
                            "range_match": {
                                "properties": {
                                    "start": {
                                        "type": "string",
                                        "description": "start of the range (inclusive)"
                                    },
                                    "end": {
                                        "type": "string",
                                        "description": "end of the range (exclusive)"
                                    }
                                },
                                "additionalProperties": true,
                                "type": "object",
                                "description": "If specified, header match will be performed based on range.\n The rule will match if the request header value is within this range.\n The entire request header value must represent an integer in base 10 notation: consisting of\n an optional plus or minus sign followed by a sequence of digits. The rule will not match if\n the header value does not represent an integer. Match will fail for empty values, floating\n point numbers or if only a subsequence of the header value is an integer.\n\n Examples:\n\n * For range [-10,0), route will match for header value -1, but not for 0, \"somestring\", 10.9,\n   \"-1somestring\""
                            },
                            "present_match": {
                                "type": "boolean",
                                "description": "If specified, header match will be performed based on whether the header is in the\n request."
                            },
                            "prefix_match": {
                                "type": "string",
                                "description": "If specified, header match will be performed based on the prefix of the header value.\n Note: empty prefix is not allowed, please use present_match instead.\n\n Examples:\n\n * The prefix *abcd* matches the value *abcdxyz*, but not for *abcxyz*."
                            },
                            "suffix_match": {
                                "type": "string",
                                "description": "If specified, header match will be performed based on the suffix of the header value.\n Note: empty suffix is not allowed, please use present_match instead.\n\n Examples:\n\n * The suffix *abcd* matches the value *xyzabcd*, but not for *xyzbcd*."
                            },
                            "invert_match": {
                                "type": "boolean",
                                "description": "If specified, the match result will be inverted before checking. Defaults to false.\n\n Examples:\n\n * The regex ``\\d{3}`` does not match the value *1234*, so it will match when inverted.\n * The range [-10,0) will match the value -1, so it will not match when inverted."
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "description": ".. attention::\n\n   Internally, Envoy always uses the HTTP/2 *:authority* header to represent the HTTP/1 *Host*\n   header. Thus, if attempting to match on *Host*, match on *:authority* instead.\n\n .. attention::\n\n   To route on HTTP method, use the special HTTP/2 *:method* header. This works for both\n   HTTP/1 and HTTP/2 as Envoy normalizes headers. E.g.,\n\n   .. code-block:: json\n\n     {\n       \"name\": \":method\",\n       \"exact_match\": \"POST\"\n     }\n\n .. attention::\n   In the absence of any header match specifier, match will default to :ref:`present_match\n   \u003cenvoy_api_field_config.route.v3.HeaderMatcher.present_match\u003e`. i.e, a request that has the :ref:`name\n   \u003cenvoy_api_field_config.route.v3.HeaderMatcher.name\u003e` header will match, regardless of the header's\n   value.\n\n  [#next-major-version: HeaderMatcher should be refactored to use StringMatcher.]\n [#next-free-field: 12]"
                    },
                    "type": "array",
                    "description": "Specifies a set of headers that the route should match on. The router will\n check the response headers against all the specified headers in the route\n config. A match will happen if all the headers in the route are present in\n the request with the same values (or based on presence if the value field\n is not in the config)."
                },
                "response_code_details": {
                    "properties": {
                        "exact": {
                            "type": "string",
                            "description": "The input string must match exactly the string specified here.\n\n Examples:\n\n * *abc* only matches the value *abc*."
                        },
                        "prefix": {
                            "type": "string",
                            "description": "The input string must have the prefix specified here.\n Note: empty prefix is not allowed, please use regex instead.\n\n Examples:\n\n * *abc* matches the value *abc.xyz*"
                        },
                        "suffix": {
                            "type": "string",
                            "description": "The input string must have the suffix specified here.\n Note: empty prefix is not allowed, please use regex instead.\n\n Examples:\n\n * *abc* matches the value *xyz.abc*"
                        },
                        "safe_regex": {
                            "$ref": "#/definitions/solo.io.envoy.type.matcher.v3.RegexMatcher",
                            "additionalProperties": true,
                            "description": "The input string must match the regular expression specified here."
                        },
                        "ignore_case": {
                            "type": "boolean",
                            "description": "If true, indicates the exact/prefix/suffix matching should be case insensitive. This has no\n effect for the safe_regex match.\n For example, the matcher *data* will match both input string *Data* and *data* if set to true."
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "Only match responses with non empty response code details (this usually\n implies a local reply)."
                }
            },
            "additionalProperties": true,
            "type": "object"
        },
        "response_transformation": {
            "properties": {
                "transformation_template": {
                    "properties": {
                        "advanced_templates": {
                            "type": "boolean",
                            "description": "If set to true, use JSON pointer notation (e.g. \"time/start\") instead of\n dot notation (e.g. \"time.start\") to access JSON elements. Defaults to\n false.\n\n Please note that, if set to 'true', you will need to use the `extraction`\n function to access extractors in the template (e.g. '{{\n extraction(\"my_extractor\") }}'); if the default value of 'false' is used,\n extractors will simply be available by their name (e.g. '{{ my_extractor\n }}')."
                        },
                        "extractors": {
                            "additionalProperties": {
                                "properties": {
                                    "header": {
                                        "type": "string",
                                        "description": "Extract information from headers"
                                    },
                                    "body": {
                                        "additionalProperties": true,
                                        "type": "object",
                                        "description": "Extract information from the request/response body"
                                    },
                                    "regex": {
                                        "type": "string",
                                        "description": "Only strings matching this regular expression will be part of the\n extraction. The most simple value for this field is '.*', which matches the\n whole source. The field is required. If extraction fails the result is an\n empty value."
                                    },
                                    "subgroup": {
                                        "type": "integer",
                                        "description": "If your regex contains capturing groups, use this field to determine which\n group should be selected."
                                    }
                                },
                                "additionalProperties": true,
                                "type": "object"
                            },
                            "type": "object",
                            "description": "Use this attribute to extract information from the request. It consists of\n a map of strings to extractors. The extractor will defines which\n information will be extracted, while the string key will provide the\n extractor with a name. You can reference extractors by their name in\n templates, e.g. \"{{ my-extractor }}\" will render to the value of the\n \"my-extractor\" extractor."
                        },
                        "headers": {
                            "additionalProperties": {
                                "$ref": "#/definitions/envoy.api.v2.filter.http.InjaTemplate",
                                "additionalProperties": true
                            },
                            "type": "object",
                            "description": "Use this attribute to transform request/response headers. It consists of a\n map of strings to templates. The string key determines the name of the\n resulting header, the rendered template will determine the value. Any existing\n headers with the same header name will be replaced by the transformed header.\n If a header name is included in `headers` and `headers_to_append`, it will first\n be replaced the template in `headers`, then additional header values will be appended\n by the templates defined in `headers_to_append`.\n For example, the following header transformation configuration:\n\n ```yaml\n    headers:\n      x-header-one: {\"text\": \"first {{inja}} template\"}\n      x-header-one: {\"text\": \"second {{inja}} template\"}\n    headersToAppend:\n      - key: x-header-one\n        value: {\"text\": \"first appended {{inja}} template\"}\n      - key: x-header-one\n        value: {\"text\": \"second appended {{inja}} template\"}\n ```\n will result in the following headers on the HTTP message:\n\n ```\n x-header-one: first inja template\n x-header-one: first appended inja template\n x-header-one: second appended inja template\n ```"
                        },
                        "headers_to_append": {
                            "items": {
                                "$schema": "http://json-schema.org/draft-04/schema#",
                                "properties": {
                                    "key": {
                                        "type": "string",
                                        "description": "Header name"
                                    },
                                    "value": {
                                        "$ref": "#/definitions/envoy.api.v2.filter.http.InjaTemplate",
                                        "additionalProperties": true,
                                        "description": "Apply a template to the header value"
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "Defines a header-template pair to be used in `headers_to_append`"
                            },
                            "type": "array",
                            "description": "Use this attribute to transform request/response headers. It consists of\n an array of string/template objects. Use this attribute to define multiple\n templates for a single header. Header template(s) defined here will be appended to any\n existing headers with the same header name, not replace existing ones.\n See `headers` documentation to see an example of usage."
                        },
                        "body": {
                            "$ref": "#/definitions/envoy.api.v2.filter.http.InjaTemplate",
                            "additionalProperties": true,
                            "description": "Apply a template to the body"
                        },
                        "passthrough": {
                            "additionalProperties": true,
                            "type": "object",
                            "description": "This will cause the transformation filter not to buffer the body.\n Use this setting if the response body is large and you don't need to\n transform nor extract information from it."
                        },
                        "merge_extractors_to_body": {
                            "additionalProperties": true,
                            "type": "object",
                            "description": "Merge all defined extractors to the request/response body.\n If you want to nest elements inside the body, use dot separator in the\n extractor name."
                        },
                        "parse_body_behavior": {
                            "enum": [
                                "ParseAsJson",
                                0,
                                "DontParse",
                                1
                            ],
                            "oneOf": [
                                {
                                    "type": "string"
                                },
                                {
                                    "type": "integer"
                                }
                            ]
                        },
                        "ignore_error_on_parse": {
                            "type": "boolean",
                            "description": "If set to true, Envoy will not throw an exception in case the body parsing\n fails."
                        },
                        "dynamic_metadata_values": {
                            "items": {
                                "$schema": "http://json-schema.org/draft-04/schema#",
                                "properties": {
                                    "metadata_namespace": {
                                        "type": "string",
                                        "description": "The metadata namespace. Defaults to the filter namespace."
                                    },
                                    "key": {
                                        "type": "string",
                                        "description": "The metadata key."
                                    },
                                    "value": {
                                        "$ref": "#/definitions/envoy.api.v2.filter.http.InjaTemplate",
                                        "additionalProperties": true,
                                        "description": "A template that determines the metadata value."
                                    }
                                },
                                "additionalProperties": false,
                                "type": "object",
                                "description": "Defines an [Envoy Dynamic\n Metadata](https://www.envoyproxy.io/docs/envoy/latest/configuration/advanced/well_known_dynamic_metadata)\n entry."
                            },
                            "type": "array",
                            "description": "Use this field to set Dynamic Metadata."
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "Apply transformation templates."
                },
                "header_body_transform": {
                    "additionalProperties": true,
                    "type": "object",
                    "description": "This type of transformation will make all the headers available in the\n response body. The resulting JSON body will consist of two attributes:\n 'headers', containing the headers, and 'body', containing the original\n body."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "transformation to perform"
        }
    },
    "additionalProperties": false,
    "type": "object",
    "definitions": {
        "envoy.api.v2.filter.http.InjaTemplate": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "properties": {
                "text": {
                    "type": "string"
                }
            },
            "additionalProperties": false,
            "type": "object",
            "description": "Defines an [Inja template](https://github.com/pantor/inja) that will be\n rendered by Gloo. In addition to the core template functions, the Gloo\n transformation filter defines the following custom functions:\n - header(header_name): returns the value of the header with the given name\n - extraction(extractor_name): returns the value of the extractor with the\n given name\n - env(env_var_name): returns the value of the environment variable with the\n given name\n - body(): returns the request/response body\n - context(): returns the base JSON context (allowing for example to range on\n a JSON body that is an array)",
            "id": "envoy.api.v2.filter.http.InjaTemplate"
        },
        "solo.io.envoy.type.matcher.v3.RegexMatcher": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "properties": {
                "google_re2": {
                    "properties": {
                        "max_program_size": {
                            "additionalProperties": true,
                            "type": "integer",
                            "description": "This field controls the RE2 \"program size\" which is a rough estimate of how complex a\n compiled regex is to evaluate. A regex that has a program size greater than the configured\n value will fail to compile. In this case, the configured max program size can be increased\n or the regex can be simplified. If not specified, the default is 100.\n\n This field is deprecated; regexp validation should be performed on the management server\n instead of being done by each individual client."
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "Google's RE2 regex engine."
                },
                "regex": {
                    "type": "string",
                    "description": "The regex match string. The string must be supported by the configured engine."
                }
            },
            "additionalProperties": false,
            "type": "object",
            "description": "[#protodoc-title: Regex matcher]\n\nA regex matcher designed for safety when used with untrusted input.",
            "id": "solo.io.envoy.type.matcher.v3.RegexMatcher"
        }
    }
}