{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "properties": {
        "http_health_check": {
            "properties": {
                "host": {
                    "type": "string",
                    "description": "The value of the host header in the HTTP health check request. If\n left empty (default value), the name of the cluster this health check is associated\n with will be used. The host header can be customized for a specific endpoint by setting the\n :ref:`hostname \u003cenvoy_api_field_config.endpoint.v3.Endpoint.HealthCheckConfig.hostname\u003e` field."
                },
                "path": {
                    "type": "string",
                    "description": "Specifies the HTTP path that will be requested during health checking. For example\n */healthcheck*."
                },
                "send": {
                    "$ref": "#/definitions/solo.io.envoy.config.core.v3.HealthCheck.Payload",
                    "additionalProperties": true,
                    "description": "[#not-implemented-hide:] HTTP specific payload."
                },
                "receive": {
                    "$ref": "#/definitions/solo.io.envoy.config.core.v3.HealthCheck.Payload",
                    "additionalProperties": true,
                    "description": "[#not-implemented-hide:] HTTP specific response."
                },
                "request_headers_to_add": {
                    "items": {
                        "$schema": "http://json-schema.org/draft-04/schema#",
                        "properties": {
                            "header": {
                                "properties": {
                                    "key": {
                                        "type": "string",
                                        "description": "Header name."
                                    },
                                    "value": {
                                        "type": "string",
                                        "description": "Header value.\n\n The same :ref:`format specifier \u003cconfig_access_log_format\u003e` as used for\n :ref:`HTTP access logging \u003cconfig_access_log\u003e` applies here, however\n unknown header values are replaced with the empty string instead of `-`."
                                    }
                                },
                                "additionalProperties": true,
                                "type": "object",
                                "description": "Header name/value pair that this option applies to."
                            },
                            "append": {
                                "additionalProperties": true,
                                "type": "boolean",
                                "description": "Should the value be appended? If true (default), the value is appended to\n existing values."
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "description": "Header name/value pair plus option to control append behavior."
                    },
                    "type": "array",
                    "description": "Specifies a list of HTTP headers that should be added to each request that is sent to the\n health checked cluster. For more information, including details on header value syntax, see\n the documentation on :ref:`custom request headers\n \u003cconfig_http_conn_man_headers_custom_request_headers\u003e`."
                },
                "request_headers_to_remove": {
                    "items": {
                        "type": "string"
                    },
                    "type": "array",
                    "description": "Specifies a list of HTTP headers that should be removed from each request that is sent to the\n health checked cluster."
                },
                "expected_statuses": {
                    "items": {
                        "$schema": "http://json-schema.org/draft-04/schema#",
                        "properties": {
                            "start": {
                                "type": "string",
                                "description": "start of the range (inclusive)"
                            },
                            "end": {
                                "type": "string",
                                "description": "end of the range (exclusive)"
                            }
                        },
                        "additionalProperties": false,
                        "type": "object",
                        "description": "[#protodoc-title: Range]\n\nSpecifies the int64 start and end of the range using half-open interval semantics [start,\n end)."
                    },
                    "type": "array",
                    "description": "Specifies a list of HTTP response statuses considered healthy. If provided, replaces default\n 200-only policy - 200 must be included explicitly as needed. Ranges follow half-open\n semantics of :ref:`Int64Range \u003cenvoy_api_msg_type.v3.Int64Range\u003e`. The start and end of each\n range are required. Only statuses in the range [100, 600) are allowed."
                },
                "codec_client_type": {
                    "enum": [
                        "HTTP1",
                        0,
                        "HTTP2",
                        1,
                        "HTTP3",
                        2
                    ],
                    "oneOf": [
                        {
                            "type": "string"
                        },
                        {
                            "type": "integer"
                        }
                    ],
                    "description": "Use specified application protocol for health checks."
                },
                "service_name_matcher": {
                    "properties": {
                        "exact": {
                            "type": "string",
                            "description": "The input string must match exactly the string specified here.\n\n Examples:\n\n * *abc* only matches the value *abc*."
                        },
                        "prefix": {
                            "type": "string",
                            "description": "The input string must have the prefix specified here.\n Note: empty prefix is not allowed, please use regex instead.\n\n Examples:\n\n * *abc* matches the value *abc.xyz*"
                        },
                        "suffix": {
                            "type": "string",
                            "description": "The input string must have the suffix specified here.\n Note: empty prefix is not allowed, please use regex instead.\n\n Examples:\n\n * *abc* matches the value *xyz.abc*"
                        },
                        "safe_regex": {
                            "properties": {
                                "google_re2": {
                                    "properties": {
                                        "max_program_size": {
                                            "additionalProperties": true,
                                            "type": "integer",
                                            "description": "This field controls the RE2 \"program size\" which is a rough estimate of how complex a\n compiled regex is to evaluate. A regex that has a program size greater than the configured\n value will fail to compile. In this case, the configured max program size can be increased\n or the regex can be simplified. If not specified, the default is 100.\n\n This field is deprecated; regexp validation should be performed on the management server\n instead of being done by each individual client."
                                        }
                                    },
                                    "additionalProperties": true,
                                    "type": "object",
                                    "description": "Google's RE2 regex engine."
                                },
                                "regex": {
                                    "type": "string",
                                    "description": "The regex match string. The string must be supported by the configured engine."
                                }
                            },
                            "additionalProperties": true,
                            "type": "object",
                            "description": "The input string must match the regular expression specified here."
                        },
                        "ignore_case": {
                            "type": "boolean",
                            "description": "If true, indicates the exact/prefix/suffix matching should be case insensitive. This has no\n effect for the safe_regex match.\n For example, the matcher *data* will match both input string *Data* and *data* if set to true."
                        }
                    },
                    "additionalProperties": true,
                    "type": "object",
                    "description": "An optional service name parameter which is used to validate the identity of\n the health checked cluster using a :ref:`StringMatcher\n \u003cenvoy_api_msg_type.matcher.v3.StringMatcher\u003e`. See the :ref:`architecture overview\n \u003carch_overview_health_checking_identity\u003e` for more information."
                }
            },
            "additionalProperties": true,
            "type": "object",
            "description": "Http health check."
        }
    },
    "additionalProperties": false,
    "type": "object",
    "description": "Same as HTTP health checker, but allows a custom path per endpoint\n The http path to use can be overriden using endpoint metadata. The endpoint specific path should\n be in the \"io.solo.health_checkers.http_path\" namespace, under a string value named \"path\".",
    "definitions": {
        "solo.io.envoy.config.core.v3.HealthCheck.Payload": {
            "$schema": "http://json-schema.org/draft-04/schema#",
            "properties": {
                "text": {
                    "type": "string",
                    "description": "Hex encoded payload. E.g., \"000000FF\"."
                },
                "binary": {
                    "type": "string",
                    "description": "[#not-implemented-hide:] Binary payload.",
                    "format": "binary",
                    "binaryEncoding": "base64"
                }
            },
            "additionalProperties": false,
            "type": "object",
            "description": "Describes the encoding of the payload bytes in the payload.",
            "id": "solo.io.envoy.config.core.v3.HealthCheck.Payload"
        }
    }
}