{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "properties": {
        "access_key": {
            "type": "string",
            "description": "provided by `glooctl create secret aws`"
        },
        "secret_key": {
            "type": "string",
            "description": "provided by `glooctl create secret aws`"
        },
        "session_token": {
            "type": "string",
            "description": "provided by `glooctl create secret aws`"
        }
    },
    "additionalProperties": false,
    "type": "object",
    "description": "There are two ways of providing AWS secrets:\n\n- Method 1: `glooctl create secret aws`\n\n ```\n glooctl create secret aws --name aws-secret-from-glooctl \\\n     --namespace default \\\n     --access-key $ACC \\\n     --secret-key $SEC\n ```\n\nwill produce a Kubernetes resource similar to this (note the `aws` field and `resource_kind` annotation):\n\n ```\n apiVersion: v1\n data:\n   aws: base64EncodedStringForMachineConsumption\n kind: Secret\n metadata:\n   annotations:\n     resource_kind: '*v1.Secret'\n   creationTimestamp: \"2019-08-23T15:10:20Z\"\n   name: aws-secret-from-glooctl\n   namespace: default\n   resourceVersion: \"592637\"\n   selfLink: /api/v1/namespaces/default/secrets/secret-e2e\n   uid: 1f8c147f-c5b8-11e9-bbf3-42010a8001bc\n type: Opaque\n ```\n\n - Method 2: `kubectl apply -f resource-file.yaml`\n   - If using a git-ops flow, or otherwise creating secrets from yaml files, you may prefer to provide AWS credentials\n   using the format below, with `aws_access_key_id` and `aws_secret_access_key` fields.\n   - This circumvents the need for the annotation, which are not supported by some tools such as\n   [godaddy/kubernetes-external-secrets](https://github.com/godaddy/kubernetes-external-secrets)\n\n ```yaml\n # a sample aws secret resource-file.yaml\n apiVersion: v1\n data:\n   aws_access_key_id: some-id\n   aws_secret_access_key: some-secret\n kind: Secret\n metadata:\n   name: aws-secret-abcd\n   namespace: default\n ```"
}